import * as _nuxt_schema from '@nuxt/schema';

interface CreateFilterOptions {
    include?: (string | RegExp)[];
    exclude?: (string | RegExp)[];
}

interface IndexSitemapRemotes {
    index?: (string | SitemapIndexEntry)[];
}
interface IndexSitemapLocals {
    [key: string]: Partial<SitemapRoot>;
}
type MultiSitemapsInput = IndexSitemapLocals & IndexSitemapRemotes;
type MaybeFunction<T> = T | (() => T);
type MaybePromise<T> = T | Promise<T>;
type SitemapEntryInput = SitemapEntry | string;
interface SitemapIndexEntry {
    sitemap: string;
    lastmod?: string;
    /**
     * Internally used to decide if the entry needs to be generated. Useful for ignoring remote sitemaps.
     */
    referenceOnly?: boolean;
}
type ResolvedSitemapEntry = Omit<SitemapEntry, 'url'> & Required<Pick<SitemapEntry, 'loc'>>;
interface SitemapRoot extends CreateFilterOptions {
    /**
     * The root sitemap name.
     * Only works when multiple sitemaps option `sitemaps` isn't used.
     *
     * @default `sitemap.xml`
     */
    sitemapName: string;
    urls: MaybeFunction<MaybePromise<SitemapEntryInput[]>>;
    defaults?: Omit<SitemapEntry, 'loc'>;
    /**
     * The endpoint to fetch dynamic URLs from.
     */
    dynamicUrlsApiEndpoint: string;
}
interface SitemapRenderCtx {
    sitemapName: string;
    urls: ResolvedSitemapEntry[];
}
interface SitemapOutputHookCtx {
    sitemapName: string;
    sitemap: string;
}
type Changefreq = 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';
interface SitemapEntry {
    loc: string;
    lastmod?: string | Date;
    changefreq?: Changefreq;
    priority?: 0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1;
    alternatives?: Array<AlternativeEntry>;
    news?: GoogleNewsEntry;
    images?: Array<ImageEntry>;
    videos?: Array<VideoEntry>;
    /**
     * @deprecated use `loc`
     */
    url?: string;
}
interface AlternativeEntry {
    hreflang: string;
    href: string | URL;
}
interface GoogleNewsEntry {
    title: string;
    date: Date | string;
    publicationName: string;
    publicationLanguage: string;
}
interface ImageEntry {
    loc: string | URL;
    caption?: string;
    geoLocation?: string;
    title?: string;
    license?: string | URL;
}
interface VideoEntry {
    title: string;
    thumbnailLoc: string | URL;
    description: string;
    contentLoc?: string | URL;
    playerLoc?: string | URL;
    duration?: number;
    expirationDate?: Date | string;
    rating?: number;
    viewCount?: number;
    publicationDate?: Date | string;
    familyFriendly?: boolean;
    restriction?: Restriction;
    platform?: Restriction;
    requiresSubscription?: boolean;
    uploader?: {
        name: string;
        info?: string | URL;
    };
    live?: boolean;
    tag?: string;
}
interface Restriction {
    relationship: 'allow' | 'deny';
    content: string;
}

interface ModuleOptions extends SitemapRoot {
    /**
     * Whether the sitemap.xml should be generated.
     *
     * @default true
     */
    enabled: boolean;
    /**
     * Enables debug logs and a debug endpoint.
     *
     * @default false
     */
    debug: boolean;
    /**
     * Should lastmod be automatically added to the sitemap.
     *
     * @default true
     */
    autoLastmod: boolean;
    /**
     * Should pages be automatically added to the sitemap.
     *
     * @default true
     */
    inferStaticPagesAsRoutes: boolean;
    /**
     * Multiple sitemap support for large sites.
     *
     * @default false
     */
    sitemaps?: boolean | MultiSitemapsInput;
    /**
     * Path to the xsl that styles sitemap.xml.
     *
     * Set to `false` to disable styling.
     *
     * @default /__sitemap__/style.xsl
     */
    xsl: string | false;
    /**
     * Toggle the tips displayed in the xsl.
     *
     * @default true
     */
    xslTips: boolean;
    /**
     * Customised the columns displayed in the xsl.
     *
     * @default [{ label: 'URL', width: '50%', select: 'string' }, { label: 'Last Modified', width: '25%', select: 'lastmod' }, { label: 'Change Frequency', width: '25%', select: 'changefreq' }]
     */
    xslColumns?: {
        label: string;
        width: `${string}%`;
        select?: string;
    }[];
    /**
     * When prerendering, should images be automatically be discovered and added to the sitemap.
     *
     * @default true
     */
    discoverImages: boolean;
    /**
     * When chunking the sitemaps into multiple files, how many entries should each file contain.
     *
     * Set to `false` to disabling chunking completely.
     *
     * @default 1000
     */
    defaultSitemapsChunkSize: number | false;
    /**
     * Modify the cache behavior.
     *
     * Passing a boolean will enable or disable the runtime cache with the default options.
     *
     * Providing a record will allow you to configure the runtime cache fully.
     *
     * @default true
     * @see https://nitro.unjs.io/guide/storage#mountpoints
     * @example { driver: 'redis', host: 'localhost', port: 6379, password: 'password' }
     */
    runtimeCacheStorage: boolean | (Record<string, any> & {
        driver: string;
    });
    /**
     * Automatically add alternative links to the sitemap based on a prefix list.
     * Is used by @nuxtjs/i18n to automatically add alternative links to the sitemap.
     *
     * @default `[]`
     */
    autoAlternativeLangPrefixes?: boolean | string[];
    /**
     * Enable when your nuxt/content files match your pages. This will automatically add sitemap content to the sitemap.
     *
     * This is similar behavior to using `nuxt/content` with `documentDriven: true`.
     */
    strictNuxtContentPaths: boolean;
    /**
     * Should the sitemap.xml display credits for the module.
     *
     * @default true
     */
    credits: boolean;
    /**
     * How long, in milliseconds, should the sitemap be cached for.
     *
     * @default 1 hour
     */
    cacheTtl: number | false;
    /**
     * Should the URLs be inserted with a trailing slash.
     *
     * @deprecated Provide `trailingSlash` through site config instead: `{ site: { trailingSlash: <boolean> }}`.
     * This is powered by the `nuxt-site-config` module.
     * @see https://github.com/harlan-zw/nuxt-site-config
     */
    trailingSlash?: boolean;
    /**
     * The url of your site.
     * Used to generate absolute URLs for the sitemap paths.
     *
     * Note: This is only required when prerendering your site or when using a canonical host.
     *
     * @deprecated Provide `url` through site config instead: `{ site: { url: <value> }}`.
     * This is powered by the `nuxt-site-config` module.
     * @see https://github.com/harlan-zw/nuxt-site-config
     */
    siteUrl?: string;
}
interface ModuleHooks {
    /**
     * @deprecated use `sitemap:resolved` or `sitemap:output`
     */
    'sitemap:prerender': (ctx: SitemapRenderCtx) => Promise<void> | void;
    'sitemap:resolved': (ctx: SitemapRenderCtx) => Promise<void> | void;
    'sitemap:output': (ctx: SitemapOutputHookCtx) => Promise<void> | void;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { ModuleHooks, ModuleOptions, _default as default };
